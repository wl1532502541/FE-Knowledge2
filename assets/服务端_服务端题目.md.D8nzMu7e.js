import{_ as i,a,o as n,aH as l}from"./chunks/framework.2-_qtiUw.js";const o=JSON.parse('{"title":"服务端题目","description":"","frontmatter":{},"headers":[],"relativePath":"服务端/服务端题目.md","filePath":"服务端/服务端题目.md","lastUpdated":1760452525000}'),p={name:"服务端/服务端题目.md"};function h(t,s,e,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="服务端题目" tabindex="-1">服务端题目 <a class="header-anchor" href="#服务端题目" aria-label="Permalink to &quot;服务端题目&quot;">​</a></h1><h2 id="问题1-nodejs-特点​" tabindex="-1">问题1：nodejs 特点​ <a class="header-anchor" href="#问题1-nodejs-特点​" aria-label="Permalink to &quot;问题1：nodejs 特点​&quot;">​</a></h2><ul><li><strong>非阻塞I/O模型</strong>： Node.js采用事件驱动、非阻塞I/O模型，使其非常适合处理高并发的网络应用程序。它可以同时处理多个客户端请求而不阻塞其他请求的处理。​</li><li><strong>单线程</strong>： Node.js单线程，但通过事件循环机制，可处理大量并发请求，编写高性能服务器变得更加容易。​</li><li><strong>速度快</strong>： Node.js构建在 V8 JavaScript引擎之上，具有出色的性能，特别适合处理I/O密集型任务。​</li><li><strong>跨平台</strong>： Node.js可以在多个操作系统上运行，包括Windows、macOS和Linux。​</li><li><strong>NPM</strong>： Node.js附带了 Node Package Manager（NPM），用于管理第三方库和工具。</li></ul><h2 id="问题2-nodejs-作用​" tabindex="-1">问题2：nodejs 作用​ <a class="header-anchor" href="#问题2-nodejs-作用​" aria-label="Permalink to &quot;问题2：nodejs 作用​&quot;">​</a></h2><ol><li><p><strong>前端 BFF（Backend For Frontend）层</strong>： Node.js可以用作前端BFF层，负责聚合多个后端API并向前端提供定制的数据和服务。这有助于减少前端应用程序中对后端API的请求数量，提高性能和用户体验。​</p></li><li><p><strong>API服务器</strong>： Node.js非常适合构建API服务器，用于提供数据和服务给前端应用程序。它的非阻塞I/O模型和事件驱动性能使其成为处理大量客户端请求的理想选择。​</p></li><li><p><strong>前端代理服务器</strong>： Node.js可以用作前端代理服务器，用于代理和转发请求到后端服务器，同时可以进行请求和响应的中间件处理，如鉴权、缓存、请求重定向等。​</p></li><li><p><strong>Web运行时服务器</strong>： Node.js可以用于构建Web运行时服务器，以在服务器端渲染（SSR）前端应用程序，提供更快的初始加载时间和更好的搜索引擎优化（SEO）。</p></li></ol><h2 id="问题3-nodejs-开放跨域白名单" tabindex="-1">问题3：nodejs 开放跨域白名单 <a class="header-anchor" href="#问题3-nodejs-开放跨域白名单" aria-label="Permalink to &quot;问题3：nodejs 开放跨域白名单&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 允许跨域请求的源（白名单）​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allowedOrigins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://127.0.0.1:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> requestOrigin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.headers.origin;​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 检查请求的来源是否在允许的白名单中​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (allowedOrigins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(requestOrigin)) {​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 设置响应头以允许跨域​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, requestOrigin);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Methods&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET, POST, PUT, DELETE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Headers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Credentials&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;true&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许携带身份验证信息（例如 Cookie）​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="问题4-dependencies-和-devdependencies-两者区别​" tabindex="-1">问题4：dependencies 和 devDependencies 两者区别​ <a class="header-anchor" href="#问题4-dependencies-和-devdependencies-两者区别​" aria-label="Permalink to &quot;问题4：dependencies 和 devDependencies 两者区别​&quot;">​</a></h2><p>​ dependencies：​</p><ul><li>属性用于定义项目的运行时依赖，这些包在实际部署和运行项目时是必需的，会被安装在生产环境。​</li><li>这些依赖通常包括项目的核心功能所需的包，如Web框架、数据库驱动、工具库等。​</li><li>当使用<code>npm install</code>或<code>yarn add</code>命令时，这些依赖包将被安装。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">​</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;koa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.7.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">​</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^3.3.4&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>devDependencies：​</p><ul><li>属性用于定义项目的开发依赖，这些依赖包在开发过程中是必需的，但在实际生产环境中不需要。​</li><li>这些依赖通常包括开发工具、测试框架、代码检查工具、打包工具等，用于项目的构建和开发。​</li><li>当使用npm install --save-dev或yarn add --dev命令时，这些依赖包将被安装。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">​</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;babel-cli&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^6.26.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">​</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;mocha&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^9.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">​</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^7.28.0&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="问题5-幽灵依赖是什么-及-解决方案​" tabindex="-1">问题5：幽灵依赖是什么 及 解决方案​ <a class="header-anchor" href="#问题5-幽灵依赖是什么-及-解决方案​" aria-label="Permalink to &quot;问题5：幽灵依赖是什么 及 解决方案​&quot;">​</a></h2><p>幽灵依赖（Phantom Dependency）是指当你的项目间接依赖了某个模块，而这个模块没有在你的package.json文件的依赖列表中明确声明。 ​ 例如，假设你的项目直接依赖于模块 A，而模块 A 又依赖于模块 B。如果你的代码直接使用了模块 B，但没有在package.json中将模块 B 声明为直接依赖，这就形成了一个幽灵依赖。如果未来模块 A 不再需要模块 B，或者升级到不再依赖模块 B 的版本，项目将因缺少必需的模块 B 而出现问题。​ ​ 如何使用 npm 解决幽灵依赖​ **1. 审查依赖：**​ 使用<code>npm ls</code>命令可以帮助你查看当前项目中所有依赖的层次结构。通过这个命令检查是否有你的代码直接使用却没有在<code>package.json</code>中声明的模块。​</p><p>**2. 清理未使用的依赖：**​ 检查项目，确保所有直接使用的依赖都在<code>package.json</code>中被正确声明。如果有未声明的依赖，应该加入到<code>package.json</code>中。​</p><p>**3. 自动检测未声明的依赖：**​ 使用一些工具如<code>depcheck</code>可以帮助你发现哪些依赖在代码中被使用，但没有被声明在<code>package.json</code>中。这可以自动化检测幽灵依赖的过程。​</p><p>**4. 确保依赖的版本管理：**​ 在<code>package.json</code>中使用准确的版本号或使用版本锁定文件（如<code>package-lock.json</code>或<code>yarn.lock</code>）。​</p><p>**5. 使用 npm 包管理工具：**​ 使用如<code>pnpm</code>统一管理相关依赖，以确保依赖的一致性和项目的稳定性。</p><h2 id="问题6-从服务器接收到-url-开始-到-返回响应结果-发生了什么事" tabindex="-1">问题6：从服务器接收到 url 开始 到 返回响应结果 发生了什么事 <a class="header-anchor" href="#问题6-从服务器接收到-url-开始-到-返回响应结果-发生了什么事" aria-label="Permalink to &quot;问题6：从服务器接收到 url 开始 到 返回响应结果 发生了什么事&quot;">​</a></h2><p>​ <strong>1. 接收URL请求：</strong> 当Web服务器（如Node.js）接收到来自客户端浏览器的HTTP请求时，它解析该请求的URL和其他HTTP头信息。​</p><p><strong>2. 路由处理：</strong> 服务器根据请求的URL和HTTP方法（GET、POST等）将请求路由到相应的处理程序。路由通常由应用程序的路由器或框架完成。​</p><p><strong>3. 中间件处理：</strong> 请求可能会经过一系列中间件处理，这些中间件可以执行诸如身份验证、日志记录、数据解析等任务。中间件是可重用的模块，可以在请求处理的不同阶段进行插入。​</p><p><strong>4. 逻辑处理：</strong> 一旦请求到达适当的路由和中间件，服务器执行特定的业务逻辑来满足请求。这可能涉及到访问数据库、计算、验证、权限检查等操作。​</p><p><strong>5. 数据库查询：</strong> 如果业务逻辑需要从数据库中检索或存储数据，服务器将与数据库进行通信，执行相应的查询或操作。这通常涉及到使用数据库查询语言（如SQL）来执行操作。​</p><p><strong>6. 数据处理：</strong> 服务器接收来自数据库的数据，对其进行处理并可能与应用程序的逻辑进行合并。数据处理可能包括格式化、筛选、排序、分组等操作。​</p><p><strong>7. 生成响应：</strong> 一旦数据处理完成，服务器生成HTTP响应，包括状态代码、响应头和响应体。响应体通常包含用于呈现页面或API响应的数据。​</p><p><strong>8. 返回响应：</strong> 生成的HTTP响应将被发送回客户端浏览器，通常作为HTML页面或JSON数据。客户端浏览器解析响应并呈现给用户。​</p><p><strong>9. 结束请求：</strong> 一旦响应被发送，请求处理过程结束，服务器可以等待下一个请求或继续处理其他请求。</p><h2 id="问题7-koa-和-expreess-区别​" tabindex="-1">问题7：Koa 和 Expreess 区别​ <a class="header-anchor" href="#问题7-koa-和-expreess-区别​" aria-label="Permalink to &quot;问题7：Koa 和 Expreess 区别​&quot;">​</a></h2><ol><li>中间件处理：​</li></ol><ul><li>Koa使用异步函数（async/await）的中间件处理，更简洁。​</li><li>Express使用回调函数的中间件处理，需要显式调用<code>next</code>函数。​</li></ul><ol start="2"><li>错误处理：​</li></ol><ul><li>Koa内置错误处理，自动捕获和处理异常。​</li><li>Express需要手动编写错误处理中间件。​</li></ul><ol start="3"><li>模块性：​</li></ol><ul><li>Koa更模块化，允许选择性添加功能。​</li><li>Express在核心包含更多功能，较重。​</li></ul><ol start="4"><li>Node.js版本：​</li></ol><ul><li>Koa 2需要Node.js 7.6或更高版本，因为它使用了async/await。​</li><li>Express适用于更旧的Node.js版本。</li></ul><h2 id="问题8-nginx-配置" tabindex="-1">问题8：nginx 配置 <a class="header-anchor" href="#问题8-nginx-配置" aria-label="Permalink to &quot;问题8：nginx 配置&quot;">​</a></h2><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局配置段​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">user </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nginx;                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Nginx worker 进程的运行用户​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">worker_processes </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动4个 worker 进程以处理请求​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/var/log/nginx/error.log;​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/var/run/nginx.pid;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 事件处理段​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    worker_connections </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每个 worker 进程处理的最大连接数​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># HTTP服务器段​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/mime.types; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 包含MIME类型配置文件​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 服务器配置段​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 监听端口 80​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example.com; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 服务器的域名​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 根目录和默认文档​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/var/www/html;      ​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.html;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /index.html; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 尝试查找文件，否则重定向到 index.html​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 反向代理示例​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://backend_server; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 反向代理到后端服务器​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 静态文件缓存​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> \\.(jpg|jpeg|png|gif|css|js)$ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            expires </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1y; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 缓存静态文件1年​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # SSL/TLS 配置​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/ssl/server.crt;​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/ssl/server.key;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 配置多个服务器段​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subdomain.example.com;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://another_backend_server;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="问题9-nginx-配置代理转发-解决跨域问题" tabindex="-1">问题9：nginx 配置代理转发，解决跨域问题 <a class="header-anchor" href="#问题9-nginx-配置代理转发-解决跨域问题" aria-label="Permalink to &quot;问题9：nginx 配置代理转发，解决跨域问题&quot;">​</a></h2><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 统一端口 5000​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127.0.0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://127.0.0.1:3000; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3000 端口代理到 5000​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host $host;​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Real-IP $remote_addr;​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Forwarded-For $proxy_add_x_forwarded_for;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://127.0.0.1:4000; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4000 端口代理到 5000​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host $host;​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Real-IP $remote_addr;​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Forwarded-For $proxy_add_x_forwarded_for;​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span></code></pre></div><h2 id="问题10-反向代理​" tabindex="-1">问题10：反向代理​ <a class="header-anchor" href="#问题10-反向代理​" aria-label="Permalink to &quot;问题10：反向代理​&quot;">​</a></h2><p>反向代理（Reverse Proxy）是一种网络架构，其中代理服务器接受来自客户端的请求，并将这些请求转发到一个或多个后端服务器，然后将后端服务器的响应返回给客户端。这与传统的正向代理服务器相反，正向代理服务器代表客户端发出请求，并从服务器获取响应。​</p><p><strong>1. 负载均衡：</strong> 可以平衡多个后端服务器之间的负载，确保请求被均匀分发到各个服务器，以提高性能和高可用性。​</p><p><strong>2. SSL终止：</strong> 反向代理可以用于解密客户端和服务器之间的SSL/TLS加密通信，减轻后端服务器的负担。​</p><p><strong>3. 安全性：</strong> 反向代理可以充当安全屏障，防止直接访问后端服务器，从而提高安全性。​</p><p><strong>4. 缓存：</strong> 反向代理可以缓存响应，以减少后端服务器的负载并提高响应时间。​</p><p><strong>5. 内容压缩：</strong> 反向代理可以在将响应发送给客户端之前对内容进行压缩，以减少带宽占用。​</p><p><strong>6. URL重写：</strong> 反向代理可以修改请求和响应中的URL，以适应特定的要求。​</p><p><strong>7. 单一入口：</strong> 反向代理可以充当应用程序的单一入口点，将客户端请求路由到不同的应用程序或微服务。​</p><p><strong>8. 保护隐私：</strong> 反向代理可以隐藏服务端的真实IP地址，增加隐私保护。​</p><p>用于构建高性能、可伸缩和安全的网络应用程序的关键组件，常用于Web服务器、负载均衡器、API网关等场景。</p>`,54)])])}const g=i(p,[["render",h]]);export{o as __pageData,g as default};
