import{_ as i,a,o as l,aH as t}from"./chunks/framework.2-_qtiUw.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DevOps/DevOps题目.md","filePath":"DevOps/DevOps题目.md","lastUpdated":1760517809000}'),e={name:"DevOps/DevOps题目.md"};function n(p,s,h,o,k,r){return l(),a("div",null,[...s[0]||(s[0]=[t(`<h2 id="问题1-设计文档规范​" tabindex="-1">问题1：设计文档规范​ <a class="header-anchor" href="#问题1-设计文档规范​" aria-label="Permalink to &quot;问题1：设计文档规范​&quot;">​</a></h2><ul><li><strong>文档标题和作者信息</strong>​</li></ul><p>在文档的开头包括标题和作者信息，以便其他团队成员可以轻松识别文档的内容和负责人。​</p><ul><li><strong>目的和背景</strong>​</li></ul><p>说明文档的目的和背景，包括项目的背景信息、需求和目标。​</p><ul><li><strong>需求 / 用例 case</strong>​</li></ul><p>描述清楚实现什么功能，完成交互流程，分支流程等。​</p><ul><li><strong>实现方案</strong>​</li></ul><p>具体技术实现方案，架构设计，数据流，涉及技术等。​</p><ul><li><strong>影响面评估</strong>​</li></ul><p>列明会牵扯到哪些模块，动到什么通用组件，以便后续回归测试。​</p><ul><li><strong>风险点评估</strong>​</li></ul><p>列明可能会导致的风险，并评估这些风险的可能性，及最坏结果。</p><h2 id="问题2-eslint-的作用​" tabindex="-1">问题2：ESLint 的作用​ <a class="header-anchor" href="#问题2-eslint-的作用​" aria-label="Permalink to &quot;问题2：ESLint 的作用​&quot;">​</a></h2><p>ESLint（JavaScript Linting Tool）是一个用于静态代码分析的工具，主要用于检查JavaScript代码中的潜在问题、错误和风格问题。它有助于提高代码质量、可维护性和一致性。​ ​ <strong>功能</strong>：</p><ol><li><strong>代码质量检查</strong>：可以帮助检查代码中的潜在问题，如未声明的变量、无用的变量、不一致的缩进、拼写错误等。​</li><li><strong>代码规范检查</strong>：可以根据配置规则检查代码的编码规范，包括缩进风格、命名规范、代码风格等。​</li><li><strong>自定义规则</strong>：可以定义自己的规则，以满足项目特定的需求，并确保所有团队成员都遵循相同的规则。​</li><li><strong>集成到工作流</strong>：可以与常用的开发工具（如代码编辑器和持续集成工具）集成，以在开发过程中及时检查代码。​</li><li><strong>插件和扩展</strong>：支持各种插件和扩展，以便检查其他JavaScript语法和框架（如React、Vue等）。</li></ol><p><strong>用法</strong></p><ol><li><strong>安装ESLint</strong>：您可以使用npm或yarn等包管理工具全局或局部安装ESLint。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install eslint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span></code></pre></div><ol start="2"><li><strong>配置文件</strong>：创建一个配置文件（通常为.eslintrc.js或.eslintrc.json），以定义规则和选项。​</li><li><strong>运行ESLint</strong>：在终端中运行ESLint，指定要检查的文件或目录。</li><li><strong>集成到编辑器</strong>：大多数流行的代码编辑器都支持ESLint插件，以在代码编辑过程中即时显示错误和警告。​</li><li><strong>持续集成</strong>：将ESLint集成到持续集成（CI）工具中，以确保每次提交都符合代码规范。</li></ol><p><strong>示例</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env: {​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    es6: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;eslint:recommended&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;no-unused-vars&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;indent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],​</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;quotes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;single&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 更多规则...​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="问题3-git-的基本使用方法​" tabindex="-1">问题3：Git 的基本使用方法​ <a class="header-anchor" href="#问题3-git-的基本使用方法​" aria-label="Permalink to &quot;问题3：Git 的基本使用方法​&quot;">​</a></h2><ol><li>安装 Git：​</li></ol><p>首先，确保您已经安装了 Git。您可以在终端中运行以下命令来检查是否已安装 Git，并获取其版本信息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>如果未安装 Git，您可以从Git官网下载并安装。</p><ol start="2"><li>配置 Git：</li></ol><p>在使用 Git 之前，您需要设置用户信息，包括用户名和电子邮件地址，以便每次提交时都能识别您。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your Name&quot;​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;youremail@example.com&quot;</span></span></code></pre></div><ol start="3"><li>初始化仓库：​</li></ol><p>要开始跟踪代码的变化，您需要将现有目录或新目录初始化为 Git 仓库。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><ol start="4"><li>添加文件：​</li></ol><p>使用 git add 命令将要跟踪的文件添加到暂存区（Staging Area）。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename</span></span></code></pre></div><p>也可以使用 git add . 来添加所有未跟踪的文件。</p><ol start="5"><li>提交变化：​</li></ol><p>使用 git commit 命令将已添加到暂存区的文件提交到版本库。请包括有意义的提交消息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your commit message&quot;</span></span></code></pre></div><ol start="6"><li>查看状态：​</li></ol><p>使用 git status 命令查看仓库的当前状态，包括已提交的文件、未提交的更改等。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div><ol start="7"><li>查看提交历史：​</li></ol><p>使用 git log 命令查看仓库的提交历史，包括提交者、日期和提交消息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span></span></code></pre></div><ol start="8"><li>创建分支：​</li></ol><p>使用 <code>git branch</code> 命令创建新的分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branchname</span></span></code></pre></div><ol start="9"><li>切换分支：​</li></ol><p>使用 <code>git checkout</code> 命令切换到其他分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branchname</span></span></code></pre></div><ol start="10"><li>合并分支:</li></ol><p>使用<code>git merge</code>命令将一个分支的更改合并到当前分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branchname</span></span></code></pre></div><ol start="11"><li>拉取和推送远程仓库：​</li></ol><p>使用 <code>git pull</code> 从远程仓库获取最新更改，使用 <code>git push</code> 将本地更改推送到远程仓库。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branchname​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branchname​</span></span></code></pre></div><ol start="12"><li>克隆远程仓库</li></ol><p>使用<code>git clone</code>命令克隆远程仓库到本地。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote_repository_url​</span></span></code></pre></div><h2 id="问题4-git-commit-message-规范" tabindex="-1">问题4：git commit message 规范 <a class="header-anchor" href="#问题4-git-commit-message-规范" aria-label="Permalink to &quot;问题4：git commit message 规范&quot;">​</a></h2><p>模板：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Type(Scope): Summary​</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>Body​</span></span>
<span class="line"><span>Reference</span></span></code></pre></div><ul><li><p><strong>类型（Type）</strong>：提交的类型</p><ul><li>feat: 新功能（feature）</li><li>fix: 修复bug</li><li>docs: 文档更新</li><li>style: 代码样式调整，不涉及代码逻辑变化（例如，空格、格式化）</li><li>refactor: 代码重构</li><li>test: 添加或修复测试</li><li>chore: 杂项任务，如构建过程、工具等</li></ul></li><li><p><strong>范围（Scope）</strong>（可选）：提交的范围，表示影响的模块或组件。</p></li><li><p><strong>摘要（Summary）</strong>：一句话描述提交的目的，尽量简洁但具体。</p></li><li><p><strong>详细说明（Body）</strong>（可选）：提供更详细的信息，解释为什么进行了这个更改，以及更改的背后逻辑。</p></li><li><p><strong>引用（Reference）</strong>（可选）：如果提交与某个问题、任务或讨论有关，可以在消息中引用它们的ID或链接。</p></li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat(core): 添加用户身份验证功能​</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>用户身份验证功能的添加，包括登录和注册功能，以及JWT令牌生成。​</span></span>
<span class="line"><span>解决了#123的问题。</span></span></code></pre></div><h2 id="问题5-git-flow-工作流" tabindex="-1">问题5：Git Flow 工作流 <a class="header-anchor" href="#问题5-git-flow-工作流" aria-label="Permalink to &quot;问题5：Git Flow 工作流&quot;">​</a></h2><p>Git Flow 是一种流行的 Git 工作流程，专门用于协作开发和管理软件项目。Git Flow 定义了一套明确的分支策略和规则，以便团队能够更有序地协作，同时保持项目的稳定性。​ ​ Git Flow 工作流程包括以下主要分支：​</p><ol><li>主分支（master）：主分支是稳定版本的分支。在 Git Flow 中，它通常包含发布的代码，任何代码在被合并到主分支之前都应经过充分测试和审查。​</li><li>开发分支（develop）：开发分支用于整个团队的协作开发。所有新功能和改进都从开发分支开始，然后合并到此分支中。​</li><li>功能分支（feature）：每个新功能都应该在单独的功能分支上进行开发。功能分支从开发分支分出，开发完成后，将其合并回开发分支。​</li><li>发布分支（release）：在准备发布新版本时，创建一个发布分支。在发布分支上可以进行版本号更新、版本测试和准备发布的工作。一旦准备就绪，发布分支将被合并到主分支和开发分支。​</li><li>修复分支（hotfix）：修复分支用于紧急修复生产环境中的严重问题。它从主分支分出，修复问题后，将其合并回主分支和开发分支。</li></ol><p>基本的 Git Flow 工作流程示例：​</p><ol><li>团队成员从 <code>develop</code> 分支创建新功能分支，例如 <code>feature-new-feature</code>。​</li><li>开发完成后，他们提交并推送功能分支。​</li><li>团队成员创建一个发布分支，例如 <code>release-1.0</code>，并在其中进行版本号更新和测试。​</li><li>一旦发布分支准备好，它被合并回 <code>master</code> 和 <code>develop</code> 分支。​</li><li>如果在生产中发现严重错误，团队可以创建一个修复分支，例如 <code>hotfix-bug-fix</code>，进行修复并将其合并回主分支和开发分支。​</li><li>团队成员持续从 <code>develop</code> 分支创建新功能分支，以进行下一轮开发。</li></ol><h2 id="问题6-git-提交文件发生冲突的原因-以及-解决方法​" tabindex="-1">问题6：Git 提交文件发生冲突的原因 以及 解决方法​ <a class="header-anchor" href="#问题6-git-提交文件发生冲突的原因-以及-解决方法​" aria-label="Permalink to &quot;问题6：Git 提交文件发生冲突的原因 以及 解决方法​&quot;">​</a></h2><p><strong>原因</strong>：并行修改相同文件，多个开发者同时编辑并提交了同一个文件，导致分支或提交之间的更改发生冲突。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HEAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">This is the current change </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the main branch.​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=======</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">This is the incoming change from the feature branch.​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> feature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">branch</span></span></code></pre></div><p>在冲突标记之间：​</p><ul><li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 和 <code>=======</code> 之间的部分是当前分支（通常是主分支）的更改，​</li><li><code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-branch</code> 之间的部分是要合并的分支（通常是特性分支）的更改。​ ​</li></ul><p><strong>解决步骤</strong>：​</p><ol><li><p>手动编辑冲突文件，决定应该保留哪个更改或如何将它们合并在一起，可使用 IDE 打开包含冲突标记的文件。​</p></li><li><p>在解决冲突后，删除冲突标记，即 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>、<code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-branch</code>。并且将决定保留的更改保留下来，并保存文件。​</p></li><li><p>使用 <code>git add</code> 命令将已解决的文件标记为已解决。​</p></li><li><p>使用 <code>git commit</code> 命令提交已解决的冲突。​</p></li><li><p>继续完成合并操作或拉取操作。​</p></li></ol><h2 id="问题7-本次提交误操作-具体撤销操作​" tabindex="-1">问题7：本次提交误操作，具体撤销操作​ <a class="header-anchor" href="#问题7-本次提交误操作-具体撤销操作​" aria-label="Permalink to &quot;问题7：本次提交误操作，具体撤销操作​&quot;">​</a></h2><ol><li>撤销上一个提交：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --soft</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD^</span></span></code></pre></div><p>这会将 HEAD（当前分支的最新提交）移动到前一个提交，并将上一个提交从历史中移除。​ <strong>注意</strong>：需要小心使用此命令，因为它会影响整个项目历史。</p><ol start="2"><li>撤销多个提交：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD~n</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 将 HEAD 指向要保留的提交之前的提交（n 为要保留的提交数）​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 暂存要丢弃的提交</span></span></code></pre></div><ol start="3"><li>回滚提交：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> block​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commit-has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><code>&lt;commit-hash&gt;</code> 是要回滚的提交的哈希值。</p><h2 id="问题8-查看查看某个文件的历史记录" tabindex="-1">问题8：查看查看某个文件的历史记录 <a class="header-anchor" href="#问题8-查看查看某个文件的历史记录" aria-label="Permalink to &quot;问题8：查看查看某个文件的历史记录&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file-pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如，要查看文件 &quot;example.txt&quot; 的历史记录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.txt</span></span></code></pre></div><p>这将显示与该文件相关的提交历史记录，包括提交的哈希值、作者、提交日期和提交消息。​ 若要查看文件的具体更改，可以使用 git log -p 命令，它会显示每个提交中的具体更改。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.txt</span></span></code></pre></div><h2 id="问题9-本地工程配置文件-不需要被提交-如何处理​" tabindex="-1">问题9：本地工程配置文件，不需要被提交，如何处理​ <a class="header-anchor" href="#问题9-本地工程配置文件-不需要被提交-如何处理​" aria-label="Permalink to &quot;问题9：本地工程配置文件，不需要被提交，如何处理​&quot;">​</a></h2><p>添加配置到 .gitignore 文件中​</p><h2 id="问题10-git-fetch-和-git-pull-的区别​" tabindex="-1">问题10：git fetch 和 git pull 的区别​ <a class="header-anchor" href="#问题10-git-fetch-和-git-pull-的区别​" aria-label="Permalink to &quot;问题10：git fetch 和  git pull 的区别​&quot;">​</a></h2><ul><li><strong><code>git fetch</code></strong>： 纯粹的获取操作，只更新本地存储远程分支的指针，不会修改工作目录中文件，不会自动合并。​</li><li><strong><code>git pull</code></strong>： 获取并合并操作，自动将远程更改合并到当前分支，可能会导致自动合并冲突，需要谨慎处理。</li></ul><h2 id="问题11-git-rebase-和-git-merge-的区别​" tabindex="-1">问题11：git rebase 和 git merge 的区别​ <a class="header-anchor" href="#问题11-git-rebase-和-git-merge-的区别​" aria-label="Permalink to &quot;问题11：git rebase 和 git merge 的区别​&quot;">​</a></h2><p>​ <strong><code>git rebase</code></strong>:</p><ul><li>用于将一个分支的更改应用到另一个分支，通常是将当前分支的更改&quot;重新基于&quot;目标分支的顶部。这可以看作是将一系列提交从一个分支上摘下，然后应用到另一个分支上。​</li><li>提交历史会变得更加线性和清晰，因为它会将当前分支的提交放在目标分支的最新提交之后。​</li><li>您的提交历史将不包含合并提交。这使得历史更容易理解，但也可能丧失一些上下文信息。​</li><li>常用于确保当前分支包含最新的更改，以减少合并冲突的可能性。​ ​ <strong><code>git merge</code></strong>:</li><li>用于将一个分支的更改合并到另一个分支，通常会创建一个新的合并提交，将两个分支的历史合并在一起。这会保留各分支的历史信息。​</li><li>在使用后，您会看到合并提交，它包含了两个分支的历史信息，以便清楚地显示哪些分支合并在一起。​</li><li>常用于将一个分支的更改合并到另一个分支，并保留分支历史的完整性。​ ​ <strong>总结</strong>：</li><li><code>git rebase</code> 会改写提交历史，使其更线性和清晰，但可能丧失上下文信息。它通常用于确保当前分支包含最新更改，并减少合并冲突。​</li><li><code>git merge</code> 会创建合并提交，保留各分支的完整历史信息。它用于将一个分支的更改合并到另一个分支，并保留各分支的历史。</li></ul><h2 id="问题12-git-reset、git-revert-和-git-checkout-有什么区别" tabindex="-1">问题12：git reset、git revert 和 git checkout 有什么区别 ？ <a class="header-anchor" href="#问题12-git-reset、git-revert-和-git-checkout-有什么区别" aria-label="Permalink to &quot;问题12：git reset、git revert 和 git checkout 有什么区别 ？&quot;">​</a></h2><p>​</p><ul><li><code>git reset</code>： 用于移动分支指针和更改提交历史，但慎用，因为它可能会删除提交。​</li><li><code>git revert</code>： 用于创建新的撤销提交，以保留提交历史。​</li><li><code>git checkout</code>： 用于切换分支或还原文件的状态。​</li></ul><h2 id="问题13-git-跟-svn-有什么区别" tabindex="-1">问题13：git 跟 svn 有什么区别 <a class="header-anchor" href="#问题13-git-跟-svn-有什么区别" aria-label="Permalink to &quot;问题13：git 跟 svn 有什么区别&quot;">​</a></h2><ol><li>分布式 vs 集中式：</li></ol><ul><li>Git 是分布式版本控制系统，每个开发者都克隆整个存储库到本地，可以在本地进行提交、分支和合并，然后将更改推送到远程仓库。</li><li>SVN 是集中式版本控制系统，开发者通过 SVN 服务器提交更改，而不是本地进行提交。所有开发者依赖中央服务器。</li></ul><ol start="2"><li>性能：</li></ol><ul><li>Git 通常在性能上表现更优，因为它的分布式架构允许本地操作，无需频繁与中央服务器通信。</li><li>SVN 可能在某些操作（如检出大型存储库）时较慢，因为它需要与中央服务器通信。</li></ul><ol start="3"><li>分支和合并：</li></ol><ul><li>Git 的分支和合并非常灵活，支持分支的快速创建和合并，使得并行开发更容易。</li><li>SVN 也支持分支和合并，但相对较复杂，不如 Git 灵活。</li></ul><ol start="4"><li>历史记录：</li></ol><ul><li>Git 保留完整的历史记录，每个克隆都包含整个历史，使得查看历史和离线工作更容易。</li><li>SVN 的历史记录通常保存在中央服务器上，需要在线才能查看历史。</li></ul><ol start="5"><li>分支标签：</li></ol><ul><li>Git 使用引用（refs）来表示分支和标签，它们非常轻量。</li><li>SVN 使用复制路径的方式来创建标签和分支，占用存储空间。</li></ul><ol start="6"><li>柔性的工作流：</li></ol><ul><li>Git 提供了更多的工作流灵活性，如基于特性分支的开发、Git flow 等。</li><li>SVN 的工作流通常较固定，根据中央服务器的结构。</li></ul><ol start="7"><li>分散性和容错性：</li></ol><ul><li>Git 具有本地分散性，即使远程服务器不可用，可以继续工作。</li><li>SVN 需要连接到中央服务器，因此在中央服务器不可用时受到限制。</li></ul><ol start="8"><li>安全性：</li></ol><ul><li>Git 使用哈希值来确保数据的完整性，有助于防止损坏或篡改。</li><li>SVN 没有内置的哈希校验机制，较容易受到损坏或篡改的影响。 ​</li></ul><h2 id="问题14-如何解决联调依赖问题​" tabindex="-1">问题14：如何解决联调依赖问题​ <a class="header-anchor" href="#问题14-如何解决联调依赖问题​" aria-label="Permalink to &quot;问题14：如何解决联调依赖问题​&quot;">​</a></h2><ol><li>对接好 API 文档（接口文档）​</li><li>前端 mock 数据​</li><li>后端接口单元测试​</li><li>或假设中间 data-mock 服务</li></ol><h2 id="问题15-关于-devops-​" tabindex="-1">问题15：关于 DevOps ​ <a class="header-anchor" href="#问题15-关于-devops-​" aria-label="Permalink to &quot;问题15：关于 DevOps ​&quot;">​</a></h2><p>​ DevOps（Development（开发）和Operations（运维）的缩写）是一种软件开发和IT运维的文化、实践和方法论。它旨在通过促进开发团队和运维团队之间的协作和自动化来加速软件交付和提高质量。DevOps 强调了软件开发和运维之间的密切合作，以确保更快速、更可靠的交付软件。​ ​</p><ol><li><p><strong>自动化</strong>：自动化是 DevOps 的核心。这包括自动化构建、测试、部署、监控和维护。通过自动化，可以减少手动操作，提高效率，并降低人为错误的风险。​</p></li><li><p><strong>持续集成（CI）</strong>：持续集成是指频繁地将开发人员的代码集成到共享代码库中，并自动进行构建和测试。这有助于快速发现和解决问题。​</p></li><li><p><strong>持续交付（CD）</strong>：持续交付是将软件交付到生产环境的自动化过程。它确保了每个代码更改都可以在任何时候部署到生产环境。​</p></li><li><p><strong>监控和反馈</strong>：实时监控应用程序的性能和可用性，以及收集用户反馈，可以帮助及早发现和解决问题。​</p></li><li><p><strong>容器化和容器编排</strong>：使用容器技术（如Docker）和容器编排工具（如Kubernetes）可以实现跨多个环境的一致性和可移植性。​</p></li><li><p><strong>微服务架构</strong>：将应用程序拆分为小型、独立的微服务，以提高可维护性、扩展性和快速部署。​</p></li><li><p><strong>跨功能团队</strong>：DevOps 鼓励开发人员、运维人员和其他相关团队之间的协作，以共同推动交付和维护软件。​</p></li><li><p><strong>自助服务和自服务</strong>：运维工具和资源的自助服务使开发人员能够管理其应用程序的一部分，减轻运维负担。</p></li></ol><h2 id="问题16-关于-docker​" tabindex="-1">问题16：关于 Docker​ <a class="header-anchor" href="#问题16-关于-docker​" aria-label="Permalink to &quot;问题16：关于 Docker​&quot;">​</a></h2><p>Docker 是一种开源的容器化平台，用于轻松创建、部署和运行应用程序和服务。容器是一种封装应用程序及其依赖项的技术，使应用程序在任何环境中都能一致运行。Docker 通过容器化技术提供了一种便捷的方式，使开发人员和运维人员能够在不同的计算环境中轻松部署应用程序，而不必担心环境差异或依赖关系问题。Docker 已成为现代应用程序开发和部署的标准，广泛用于各种场景，包括微服务架构、持续集成和持续交付（CI/CD）、开发环境隔离、多云环境支持等。它使得应用程序的构建、交付和运维更加灵活、高效和可靠。​ ​</p><ol><li><p><strong>容器化</strong>：Docker 将应用程序和其依赖项打包到一个容器中，容器包括应用程序代码、运行时、系统工具、系统库等。这使得应用程序在不同的环境中运行时表现一致，无论是开发、测试、生产还是本地开发环境。​</p></li><li><p><strong>轻量</strong>：容器是轻量的，与虚拟机相比，它们需要更少的资源，因为它们共享操作系统内核，并且不需要独立的操作系统副本。​</p></li><li><p><strong>可移植性</strong>：Docker 容器可以在不同的计算平台上运行，包括云、本地服务器、笔记本电脑等。这使得应用程序在不同环境中具有高度的可移植性。​</p></li><li><p><strong>快速部署</strong>：Docker 容器可以快速启动，通常在几秒内。这使得应用程序的部署、伸缩和扩展变得更加高效。​</p></li><li><p><strong>版本控制</strong>：Docker 允许您创建镜像，这些镜像包括应用程序和依赖项的特定版本。这样，您可以精确控制应用程序的版本，以便进行版本回退或升级。​</p></li><li><p><strong>自动化</strong>：Docker 可以与自动化工具（如Docker Compose、Kubernetes等）结合使用，实现自动部署、扩展、负载均衡等操作。​</p></li><li><p><strong>社区支持</strong>：Docker 有一个庞大的开发和用户社区，提供了许多公开可用的镜像和工具，可以加速应用程序开发和部署。</p></li></ol><p>例子：​</p><ul><li>dockerfile ：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用官方 Node.js 镜像作为基础镜像​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:14​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置工作目录​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制应用程序依赖项清单并安装​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制应用程序代码到容器​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暴露应用程序监听的端口​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3000​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">​</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动应用程序​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.js&quot;]</span></span></code></pre></div><ol><li>使用官方 Node.js 镜像（在此示例中使用版本 14）作为基础镜像。​</li><li>设置工作目录 <code>/app</code>，所有后续命令将在该目录中执行。​</li><li>复制应用程序的依赖项清单文件 <code>package.json</code> 和 <code>package-lock.json</code> 到容器中。​</li><li>运行 <code>npm install</code> 安装应用程序的依赖项。​</li><li>复制应用程序的代码文件（包括 <code>app.js</code>）到容器中。​</li><li>使用 <code>EXPOSE</code> 指令声明应用程序将监听的端口（在此示例中是 3000）。​</li><li>使用 <code>CMD</code> 指令定义容器启动时要运行的命令，这里是启动 Node.js 应用程序。</li></ol><ul><li>构建该 Docker 镜像</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-node-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><ul><li>运行容器并映射端口，</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3000:3000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-node-app</span></span></code></pre></div><ul><li>这将启动一个容器，其中运行了您的 Node.js 应用程序，并可通过浏览器访问 <code>http://localhost:3000</code>。​ ​</li></ul>`,138)])])}const c=i(e,[["render",n]]);export{g as __pageData,c as default};
