import{o as n,c as s,a}from"./app.bb0c571a.js";const t='{"title":"深浅拷贝","description":"","frontmatter":{},"relativePath":"手写/深浅拷贝.md","lastUpdated":1628873174654}',p={},o=[a('<h1 id="深浅拷贝" tabindex="-1">深浅拷贝 <a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a></h1><div class="language-javascript"><pre><code><span class="token comment">//浅拷贝</span>\n<span class="token keyword">function</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token keyword">typeof</span> source <span class="token operator">!=</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token keyword">return</span> source\n    <span class="token keyword">if</span><span class="token punctuation">(</span>source <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//第二种写法 Array.isArray(obj)</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>source<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>source<span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//深拷贝</span>\n<span class="token comment">//1.简洁版</span>\n<span class="token comment">// 缺点     他无法实现对函数 、RegExp等特殊对象的克隆</span>\n<span class="token comment">//          会抛弃对象的constructor,所有的构造函数会指向Object</span>\n<span class="token comment">//          对象有循环引用,会报错</span>\n<span class="token keyword">function</span> <span class="token function">deepCopy0</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//2.正式版</span>\n<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token keyword">typeof</span> source <span class="token operator">!=</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token keyword">return</span> source\n    <span class="token keyword">let</span> target<span class="token operator">=</span>source<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Array<span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">deepCopy</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> target\n<span class="token punctuation">}</span>\n\n<span class="token comment">//test</span>\n\n<span class="token comment">// 1.obj</span>\n<span class="token comment">// let source={</span>\n<span class="token comment">//     a:1,</span>\n<span class="token comment">//     b:[2,[3]],</span>\n<span class="token comment">//     c:{d:4,e:[5,6]}</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// 2.array</span>\n<span class="token keyword">let</span> source<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token punctuation">{</span>c<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n\n<span class="token keyword">let</span> target<span class="token operator">=</span><span class="token function">deepCopy</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;target:&#39;</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;source:&#39;</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;alert target start&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 1.obj</span>\n<span class="token comment">// target.a=2</span>\n<span class="token comment">// target.b[1]={f:1}</span>\n<span class="token comment">// target.c.d=5</span>\n\n<span class="token comment">// 2.array</span>\ntarget<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>\ntarget<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span>\ntarget<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">2</span>\ntarget<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token number">3</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;alert target end&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;target:&#39;</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;source:&#39;</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>结果： 1. target:{&quot;a&quot;:1,&quot;b&quot;:[2,[3]],&quot;c&quot;:{&quot;d&quot;:4,&quot;e&quot;:[5,6]}} source:{&quot;a&quot;:1,&quot;b&quot;:[2,[3]],&quot;c&quot;:{&quot;d&quot;:4,&quot;e&quot;:[5,6]}} alert target start alert target end target:{&quot;a&quot;:2,&quot;b&quot;:[2,{&quot;f&quot;:1}],&quot;c&quot;:{&quot;d&quot;:5,&quot;e&quot;:[5,6]}} source:{&quot;a&quot;:1,&quot;b&quot;:[2,[3]],&quot;c&quot;:{&quot;d&quot;:4,&quot;e&quot;:[5,6]}} 2. target:[1,2,[3,[4]],{&quot;a&quot;:1,&quot;b&quot;:{&quot;c&quot;:2}}] source:[1,2,[3,[4]],{&quot;a&quot;:1,&quot;b&quot;:{&quot;c&quot;:2}}] alert target start alert target end target:[2,2,[3,5],{&quot;a&quot;:2,&quot;b&quot;:{&quot;c&quot;:3}}] source:[1,2,[3,[4]],{&quot;a&quot;:1,&quot;b&quot;:{&quot;c&quot;:2}}]</p>',3)];p.render=function(a,t,p,c,e,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
